#include <bits/stdc++.h>
using namespace std;
#define MAX 10
class Matrix{
	private:
		int m,n;
		float *a[MAX];
	public:
		Matrix(){
			cin >> this -> m >> this -> n;
			for(int i = 0; i < this -> m; i++){
				a[i] = new float;
				for(int j = 0; j < this -> n; j++){
					cin >> this -> a[i][j];
				}
			}
		}
		Matrix(Matrix &b){
			this -> m = b.m;
			this -> n = b.n;
			for(int i = 0; i < this -> m; i++){
				a[i] = new float;
				for(int j = 0; j < this -> n; j++){
					this -> a[i][j] = b.a[i][j];
				}
			}
		}
		Matrix(int row, int col){
			this -> m = row;
			this -> n = col;
			for(int i = 0; i < row; i++){
				this -> a[i] = new float;
				for(int j = 0; j < col; j++){
					this -> a[i][j] = 0;
				}
			}
		}
		void display(){
			cout << fixed << setprecision(0);
			for(int i = 0; i < this -> m; i++){
				for(int j = 0; j < this -> n; j++){
					cout << this -> a[i][j] << " ";
				}
				cout << endl;
			}
		}
		bool isadd(Matrix &b){
			return (this -> m == b.m && this -> n == b.n);
		}
		bool ismul(Matrix &b){
			return (this -> n == b.m);
		}
		Matrix operator + (Matrix &b){
			Matrix kq(this -> m, this -> n);
			for(int i = 0; i < this -> m; i++){
				for(int j = 0; j < this -> n; j++){
					kq.a[i][j] = this -> a[i][j] + b.a[i][j];
				}
			}
			return kq;
		}
		friend int rowdim(Matrix &a, Matrix &b){
			return a.m;
		}
		friend int coldim(Matrix &a, Matrix &b){
			return b.n;
		}
		Matrix operator*(Matrix&b){
			int row = rowdim(*this, b);
			int col = coldim(*this, b);
			Matrix kq(row,col);
			for(int i = 0; i < row; i++){
				for(int j = 0; j < col; j++){
					for(int k = 0; k < this -> n; k++){
						kq.a[i][j] += (this -> a[i][k] * b.a[k][j]);
					}
				}
			}
			return kq;
		}

};
int main(){
	Matrix A;
	A.display();
	Matrix B;
	B.display();
	Matrix C(A);
	if(A.isadd(B)){
		C = A + B;C.display();
	}
	if(A.ismul(B)){
		int row, col;
		row = rowdim(A,B);
		col = coldim(A,B);
		Matrix D(row,col);
		D= A*B;
		D.display();
	}
	return 0;
}
/*
2 3
1 2 3
3 4 5
2 3
1 1 1
1 1 1

2 3
1 2 3
3 4 5
3 2 
1 1 
1 1
1 1

3 3
-1 2 3
1 -2 3
1 2 -3
3 3
1 -2 -3
-1 2 -3
-1 -2 3
*/
